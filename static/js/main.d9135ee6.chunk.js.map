{"version":3,"sources":["components/overlays/MainOverlay.jsx","components/Timeline.jsx","App.js","reportWebVitals.js","index.js"],"names":["MainOverlay","props","state","source","selectedTimeline","selectedObject","timeline","selectedEvent","event","hasMounted","handleSelect","handleGoToProjectRoot","bind","handleSelectTimeline","handleSelectEvent","this","setState","e","timelineLabel","$","target","hasClass","attr","closest","eventLabel","label","fullRender","renderLoad","fileViewList","events","className","onClick","icon","faChevronRight","value","onChange","map","line","i","notes","item","style","borderColor","color","start","end","posn","React","Component","Timeline","handleZoomIn","handleZoom","handleZoomOut","closeOverlay","setOverlay","toggleMenu","overlay","openNavigation","toggleFullscreen","fullscreen","concat","forEach","j","Math","round","random","disabledArray","Array","length","fill","trackPosn","scrollPosn","zoom","mouseDown","readyForTrack","minWidth","width","maxWidth","minHeight","height","maxHeight","aspectRatio","isTracked","handleToggleLine","handleTrack","handleScroll","handleDragToZoom","handleClearState","handleKeyPress","handleSaveToFile","handleCopyAsJSON","thisObj","window","addEventListener","resizeTicker","canvas","undefined","position","component","totalLength","boundsAndLength","left","parseInt","css","coord","lineWrapper","earliestDate","latestDate","linesLeft","getBoundingClientRect","componentLeft","linesWidth","max","min","overlayPipeline","callback","delta","oldZoom","newZoom","movementX","altKey","shiftKey","deltaY","is","indexOf","type","buttons","snapToEvent","x","touches","clientX","coordToPosn","setTimeout","key","element","document","createElement","setAttribute","encodeURIComponent","JSON","stringify","display","body","appendChild","click","removeChild","select","setSelectionRange","execCommand","styleProps","trackCoord","posnToCoord","allUniqueDates","theme","tabIndex","onMouseDown","onMouseUp","onKeyDown","faBars","faArrowLeft","faCompress","faExpand","onMouseMove","expanded","faFolderOpen","faFileDownload","faClipboard","dragging","onWheel","disabled","tracked","title","faEyeSlash","faEye","stroke","y1","y2","x1","x2","cy","cx","onMouseOver","onMouseOut","y","rx","ry","dominantBaseline","textAnchor","faSearch","floor","faTimes","result","selectedTimelineLabel","selectedEventLabel","find","datesList","push","sort","a","b","App","handleLoadFile","json","lines","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d9135ee6.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport { faArrowRight, faBookOpen, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass MainOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: props.source,\r\n            selectedTimeline: props.selectedObject.timeline,\r\n            selectedEvent: props.selectedObject.event,\r\n\r\n            hasMounted: false,\r\n        };\r\n\r\n        this.handleSelect = props.handleSelect;\r\n        \r\n        this.handleGoToProjectRoot = this.handleGoToProjectRoot.bind(this);\r\n        this.handleSelectTimeline = this.handleSelectTimeline.bind(this);\r\n        this.handleSelectEvent = this.handleSelectEvent.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            hasMounted: true,\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            source: props.source,\r\n            selectedTimeline: props.selectedObject.timeline,\r\n            selectedEvent: props.selectedObject.event,\r\n        });\r\n    }\r\n\r\n    handleGoToProjectRoot(e) {\r\n        this.handleSelect(null);\r\n    }\r\n\r\n    handleSelectTimeline(e) {\r\n        let timelineLabel = \"\";\r\n        if($(e.target).hasClass(\"timeline-select\"))\r\n            timelineLabel = $(e.target).attr(\"value\");\r\n        else\r\n            timelineLabel = $(e.target).closest(\".file-view-timeline-item\").attr(\"value\");\r\n\r\n        this.handleSelect(timelineLabel);\r\n    }\r\n\r\n    handleSelectEvent(e) {\r\n        let eventLabel = \"\";\r\n        if($(e.target).hasClass(\"event-select\"))\r\n            eventLabel = $(e.target).attr(\"value\");\r\n        else\r\n            eventLabel = $(e.target).closest(\".file-view-event-item\").attr(\"value\");\r\n\r\n        this.handleSelect(this.state.selectedTimeline.label, eventLabel);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasMounted) return this.fullRender();\r\n        else return this.renderLoad();\r\n    }\r\n\r\n    renderLoad() {\r\n        return <div></div>\r\n    }\r\n\r\n    fullRender() {\r\n        const { source, selectedTimeline, selectedEvent } = this.state,\r\n              handleGoToProjectRoot = this.handleGoToProjectRoot,\r\n              handleSelectTimeline = this.handleSelectTimeline,\r\n              handleSelectEvent = this.handleSelectEvent;\r\n        \r\n        let fileViewList = [],\r\n            selectedObject = selectedEvent ?? selectedTimeline ?? null;\r\n        if(selectedTimeline !== null) fileViewList = selectedTimeline.events;\r\n        else fileViewList = source;\r\n\r\n        return (\r\n            <div className=\"main-overlay\">\r\n                <div className=\"selected-breadcrumbs\">\r\n                    <div className=\"clear-select\" onClick={handleGoToProjectRoot}>Project</div>\r\n                    {\r\n                        selectedTimeline !== null &&\r\n                            <FontAwesomeIcon icon={faChevronRight} />\r\n                    }\r\n                    {\r\n                        (selectedTimeline !== null && selectedEvent === null) &&\r\n                            <select className=\"timeline-select\" value={selectedTimeline.label}\r\n                                    onChange={handleSelectTimeline}>\r\n                                {\r\n                                    source.map((line, i) => {\r\n                                        return (<option value={line.label} key={i}>{line.label}</option>)\r\n                                    })\r\n                                }\r\n                            </select>\r\n                    }\r\n                    {\r\n                        (selectedTimeline !== null && selectedEvent !== null) &&\r\n                            <div className=\"timeline-select\" value={selectedTimeline.label}\r\n                                onClick={handleSelectTimeline}>\r\n                                {selectedTimeline.label}\r\n                            </div>\r\n                    }\r\n                    {\r\n                        selectedTimeline !== null && selectedEvent !== null &&\r\n                            <FontAwesomeIcon icon={faChevronRight} />\r\n                    }\r\n                    {\r\n                        selectedTimeline !== null && selectedEvent !== null &&\r\n                            <select className=\"event-select\" value={selectedEvent.label}\r\n                                    onChange={handleSelectEvent}>\r\n                                {\r\n                                    selectedTimeline.events.map((event, i) => {\r\n                                        return (<option value={event.label} key={i}>{event.label}</option>)\r\n                                    })\r\n                                }\r\n                            </select>\r\n                    }\r\n                </div>\r\n                {\r\n                    selectedObject !== null && \r\n                        <div className=\"notes-section\">\r\n                            <div className=\"selected-label\">{ selectedObject.label }</div>\r\n                            <div className=\"selected-notes\">{ selectedObject.notes }</div>\r\n                        </div>\r\n                }\r\n                {\r\n                    selectedEvent===null &&\r\n                        <div>\r\n                            {/* { selectedTimeline!==null && <hr /> } */}\r\n                            {\r\n                                selectedTimeline!==null && (\r\n                                    <div className=\"file-view-label\">\r\n                                        <b>{ selectedObject.label }</b>'s contents...\r\n                                    </div>)\r\n                            }\r\n                            <table className=\"file-view\">\r\n                                <tbody>\r\n                                    <tr className=\"file-view-header\">\r\n                                        <th className=\"item-label\">Name</th>\r\n                                        <th className=\"item-type\">Type</th>\r\n                                        <th className=\"item-posn\">Position</th>\r\n                                    </tr>\r\n                                    {\r\n                                        fileViewList.map((item, i) =>\r\n                                            <tr className={selectedTimeline === null ? \"file-view-timeline-item\" : \"file-view-event-item\"}\r\n                                                value={item.label} key={i}\r\n                                                onClick={selectedTimeline === null ? handleSelectTimeline : handleSelectEvent}>\r\n                                                <td className=\"item-label\"\r\n                                                    style={{ borderColor: item.color || \"transparent\", }}>\r\n                                                    {item.label}\r\n                                                </td>\r\n                                                <td className=\"item-posn\">{ selectedTimeline === null ? \"Timeline\" : \"Event\" }</td>\r\n                                                <td className=\"item-posn\">\r\n                                                    {\r\n                                                        selectedTimeline === null ?\r\n                                                            item.start + \" – \" + item.end :\r\n                                                            item.posn\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MainOverlay;","import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faBars, faInfo, faSearch, faTimes, faEye, faEyeSlash, faExpand, faCompress, faFileDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport { faFolderOpen, faClipboard } from '@fortawesome/free-regular-svg-icons';\r\n\r\nimport MainOverlay from './overlays/MainOverlay';\r\n\r\nclass Timeline extends React.Component {\r\n    constructor(props) {  \r\n        super(props);\r\n\r\n        let source = props.source.concat([]);\r\n        source.forEach(function(line, i) {\r\n            line.events.forEach(function(event, j) {\r\n                event.posn = Math.round(Math.random()*(line.end-line.start) + line.start);\r\n            })\r\n        });\r\n\r\n        this.state = {\r\n            source: source,\r\n            selectedTimeline: null,\r\n            selectedEvent: null,\r\n            overlay: \"none\",\r\n            fullscreen: false,\r\n            \r\n            disabledArray: Array(props.source.length).fill(false),\r\n            trackPosn: -1,\r\n            scrollPosn: 0,\r\n            zoom: 1,\r\n            \r\n            hasMounted: false,\r\n            mouseDown: null,\r\n            readyForTrack: true,\r\n\r\n            // Component props\r\n            minWidth: props.minWidth,\r\n            width: props.width,\r\n            maxWidth: props.maxWidth,\r\n            minHeight: props.minHeight,\r\n            height: props.height,\r\n            maxHeight: props.maxHeight,\r\n            aspectRatio: props.aspectRatio,\r\n        };\r\n        \r\n        this.isTracked = this.isTracked.bind(this);\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.handleSelectTimeline = this.handleSelectTimeline.bind(this);\r\n        this.handleSelectEvent = this.handleSelectEvent.bind(this);\r\n        this.handleToggleLine = this.handleToggleLine.bind(this);\r\n        this.handleTrack = this.handleTrack.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n        this.handleZoomIn = this.handleZoomIn.bind(this);\r\n        this.handleZoomOut = this.handleZoomOut.bind(this);\r\n        this.handleDragToZoom = this.handleDragToZoom.bind(this);\r\n        this.handleClearState = this.handleClearState.bind(this);\r\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.handleSaveToFile = this.handleSaveToFile.bind(this);\r\n        this.handleCopyAsJSON = this.handleCopyAsJSON.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let thisObj = this;\r\n        window.addEventListener('resize', function() {\r\n            const resizeTicker = thisObj.state.resizeTicker;\r\n            thisObj.setState({\r\n                resizeTicker: (resizeTicker ?? 0) + 1,\r\n            });\r\n        });\r\n        this.setState({\r\n            hasMounted: true,\r\n        });\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                                                                        //\r\n    //                                Complex Getter Functions                                //\r\n    //                                                                                        //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * Finds the selected Timeline and Event objects from their labels\r\n     * @returns {object} an object containing selectedTimeline and selectedEvent (both defaulting to null)\r\n     */\r\n    get selectedObject() {\r\n        let result = {timeline: null, event: null, };\r\n        const { source, selectedTimeline: selectedTimelineLabel, selectedEvent: selectedEventLabel } = this.state;\r\n        if(selectedTimelineLabel === null) return result;\r\n\r\n        result.timeline = source.find((line) => {\r\n            return line.label === selectedTimelineLabel;\r\n        });\r\n        if(selectedEventLabel === null) return result;\r\n\r\n        result.event = result.timeline.events.find((event) => {\r\n            return event.label === selectedEventLabel;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a sorted array of unique numbers representing the start and end dates of all Timelines\r\n     * @returns {Array<number>} Sorted array of unique numbers representing the start and end dates of all Timelines \r\n     */\r\n    get allUniqueDates() {\r\n        let datesList = [];\r\n        this.state.source.forEach(function(line) {\r\n            if(!(line.start in datesList)) datesList.push(line.start);\r\n            if(!(line.end in datesList)) datesList.push(line.end);\r\n        });\r\n        datesList.sort((a, b) => a-b);\r\n        return datesList;\r\n    }\r\n\r\n    /**\r\n     * Finds the earliest date, latest date, and total length between all Timelines\r\n     * @returns {object} an object containing earliestDate, latestDate, and totalLength\r\n     */\r\n    get boundsAndLength() {\r\n        let earliestDate = undefined,\r\n            latestDate = undefined;\r\n        this.state.source.forEach(function(line) {\r\n            if(earliestDate === undefined) {\r\n                earliestDate = line.start;\r\n                latestDate = line.end;\r\n            }\r\n            else {\r\n                if(line.start < earliestDate) earliestDate = line.start;\r\n                if(line.end > latestDate) latestDate = line.end;\r\n            }\r\n        });\r\n\r\n        return {\r\n            earliestDate: earliestDate,\r\n            latestDate: latestDate,\r\n            totalLength: (latestDate-earliestDate),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Translates a position on the timeline to the appropriate position in relation to the DOM \r\n     * @param {number} posn - the timeline posn to use as a reference\r\n     * @returns {number} the cooresponding x-coordinate of the position in pixels\r\n     */\r\n    posnToCoord(posn) {\r\n        const canvas = $(\"ul.timeline > .timeline-item > .line-container\");\r\n        if(canvas.position() === undefined) return 0;\r\n    \r\n        const component = $(\".timeline\");\r\n        const { scrollPosn, zoom } = this.state,\r\n            totalLength = this.boundsAndLength.totalLength,\r\n            canvasLeft = canvas.position().left,\r\n            componentLeft = component.position().left,\r\n            paddingOffset = parseInt(canvas.css(\"padding-left\")),\r\n            canvasWidth = canvas.width();\r\n\r\n        return (canvasLeft - componentLeft + paddingOffset - 2)     // Base value (lowest possible)\r\n            + canvasWidth*((posn - scrollPosn)/(totalLength/zoom)); // Portion of the canvas SVG's width                                                    // \r\n    }\r\n\r\n    /**\r\n     * Translates a coordinate in relation to the DOM to a position on the timeline \r\n     * @param {number} coord - the x-coordinate to use as a reference\r\n     * @returns {number} the correspdoning position on the timeline\r\n     */\r\n    coordToPosn(coord) {\r\n        const component = $(\".timeline\"),\r\n            lineWrapper = $(\".timeline > .timeline-item > .line-container > .line-wrapper\");\r\n        const { zoom, scrollPosn } = this.state,\r\n              { earliestDate, latestDate, totalLength } = this.boundsAndLength,\r\n              linesLeft = lineWrapper[0].getBoundingClientRect().left,\r\n              componentLeft = component.position().left,\r\n              linesWidth = lineWrapper.width();\r\n\r\n        return Math.max(earliestDate, Math.min(latestDate,\r\n            (totalLength/zoom**2)*(coord - (linesLeft - componentLeft))/(linesWidth/zoom) + Math.max(earliestDate, scrollPosn)));\r\n    }\r\n\r\n    /**\r\n     * Is the current tracker position within the bounds of the given line? \r\n     * @param {Object} line - the x-coordinate to use as a reference\r\n     * @returns {boolean} whether the given line is currently tracked\r\n     */\r\n     isTracked(line) {\r\n        const trackPosn = this.state.trackPosn;\r\n        return !(line.start>trackPosn || line.end<trackPosn) || trackPosn===-1;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                                                                        //\r\n    //                                    Timeline Controls                                   //\r\n    //                                                                                        //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    /**\r\n     * Handles the selecting of Timeline or Event objects\r\n     * @param {string} timelineLabel - the label of the selected Timeline or the Timeline of the selected Object\r\n     * @param {string} eventLabel - the label of the selected Event (defaults to null)\r\n     * @param {string} overlayPipeline - the label of the overlay that should be shown on-selection (defaults to the current overlay)\r\n     * @param {function} callback - the callback that should be called on-selection (defaults to an empty function)\r\n     */\r\n    handleSelect(timelineLabel, eventLabel = null, overlayPipeline = this.state.overlay, callback = () => {}) {\r\n        this.setState({\r\n            selectedTimeline: timelineLabel,\r\n            selectedEvent: eventLabel,\r\n            overlay: overlayPipeline,\r\n        }, callback());\r\n    }\r\n    /**\r\n     * Handles the selection of Timelines\r\n     * @param {event} e - the event that initated the selection; used for identifying the selected Timeline\r\n     * @helper {@link Timeline#handleSelect}\r\n     */\r\n    handleSelectTimeline(e) {\r\n        const timeline = $(e.target).closest(\".timeline-item\").attr(\"label\");\r\n        this.handleSelect(timeline, null, \"main\");\r\n    }\r\n    /**\r\n     * Handles the selection of Events\r\n     * @param {event} e - the event that initated the selection; used for identifying the selected Event\r\n     * @helper {@link Timeline#handleSelect}\r\n     */\r\n    handleSelectEvent(e) {\r\n        const timeline = $(e.target).closest(\".timeline-item\").attr(\"label\"),\r\n              event = $(e.target).attr(\"label\");\r\n\r\n        this.handleSelect(timeline, event, \"main\");\r\n    }\r\n\r\n    /**\r\n     * Handles zooming the Timelines view in or out\r\n     * @param {number} delta - the degree, positive or negative, to which the view should be zoomed in\r\n     */\r\n    handleZoom(delta) {\r\n        const { zoom: oldZoom, scrollPosn } = this.state;\r\n        const { totalLength } = this.boundsAndLength,\r\n              newZoom = Math.max(1, Math.min(2, oldZoom + delta));\r\n            \r\n        this.setState({\r\n            zoom: newZoom,\r\n            scrollPosn: Math.max(0, Math.min(totalLength - (totalLength/newZoom), scrollPosn*newZoom/oldZoom)),\r\n        });\r\n    }\r\n    /**\r\n     * Handles zooming the Timelines view in\r\n     * @helper {@link Timeline#handleZoom}\r\n     */\r\n    handleZoomIn = () => this.handleZoom(0.1);\r\n    /**\r\n     * Handles zooming the Timelines view out\r\n     * @helper {@link Timeline#handleZoom}\r\n     */\r\n    handleZoomOut = () => this.handleZoom(-0.1);\r\n\r\n    /**\r\n     * Handles zooming in and out by dragging horizontally on the zoom indicator\r\n     * @param {event} e - the event that initated the zoom; used for identifying intended zoom direction\r\n     * @helper {@link Timeline#handleZoomIn}\r\n     * @helper {@link Timeline#handleZoomOut}\r\n     */\r\n    handleDragToZoom(e) {\r\n        if(e.movementX > 0) this.handleZoomIn();\r\n        if(e.movementX < 0) this.handleZoomOut();\r\n    }\r\n\r\n    /**\r\n     * Handles the zooming and horizontal scrolling of the Timeline view\r\n     * @param {event} e - the event that initated the scroll; used for identifying intended action\r\n     * @helper {@link Timeline#handleZoomIn}\r\n     * @helper {@link Timeline#handleZoomOut}\r\n     */\r\n    handleScroll(e) {\r\n        if(!e.altKey && !e.shiftKey) return;\r\n        \r\n        if(e.altKey) {\r\n            if(e.deltaY > 0) return this.handleZoomOut(e);\r\n            else return this.handleZoomIn(e);\r\n        }\r\n        else if(e.shiftKey) {\r\n            const { scrollPosn, zoom } = this.state,\r\n                  { earliestDate, latestDate, totalLength } = this.boundsAndLength;\r\n            const delta = (e.deltaY < 0 ? -1 : 1)*totalLength/20;\r\n            \r\n            this.setState({\r\n                scrollPosn: Math.min(latestDate - totalLength/zoom, Math.max(earliestDate, scrollPosn + delta)),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the snapping of the tracker to Events in the Timelines view\r\n     * @param {event} e - the event that initated the tracking; used for identifying the snapped Event\r\n     */\r\n    snapToEvent(e) {\r\n        const timeline = $(e.target).closest(\".timeline-item\").attr(\"label\"),\r\n              event = $(e.target).attr(\"label\"),\r\n              trackPosn = $(e.target).attr(\"posn\");\r\n            \r\n        this.setState({\r\n            trackPosn: trackPosn,\r\n        }, this.handleSelect(timeline, event));\r\n    }\r\n    /**\r\n     * Handles tracking in the Timelines view\r\n     * @param {event} e - the event that initated the tracking; used for identifying the tracking position\r\n     * @helper {@link Timeline#snapToEvent}\r\n     */\r\n    handleTrack(e) {\r\n        let validEventTypes = [\"click\", \"mousedown\", \"mousemove\", \"touchmove\"];\r\n        if($(e.target).is(\".timeline-bottom *\") ||\r\n            validEventTypes.indexOf(e.type) < 0 ||\r\n            (e.type===\"touchmove\" && !this.state.readyForTrack) ||\r\n            e.buttons !== 1) return;\r\n        if($(e.target).hasClass(\"line-event\")) return this.snapToEvent(e);\r\n\r\n        const x = e.type === 'touchmove' ?\r\n                  e.touches[0].clientX :\r\n                  e.clientX;\r\n        \r\n        let trackPosn = this.coordToPosn(x);\r\n        this.setState({\r\n            trackPosn: trackPosn,\r\n            readyForTrack: false,\r\n        }, function() {\r\n            let thisObj = this;\r\n            let setState = () => {thisObj.setState({ readyForTrack: true, })};\r\n            setTimeout(setState, 0);                    \r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles toggling a Timeline on and off in the Timelines view\r\n     * @param {event} e - the event that initated the toggling; used for identifying the toggled Timeline\r\n     */\r\n    handleToggleLine(e) {\r\n        let disabledArray = this.state.disabledArray.concat([]);\r\n        this.state.source.forEach(function(line, i) {\r\n            if(line.label === $(e.target).closest(\".timeline-item\").attr(\"label\"))\r\n                disabledArray[i] = !disabledArray[i];\r\n        })\r\n        this.setState({\r\n            disabledArray: disabledArray,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles reseting the selected Timeline and Event objects, the tracker, and the overlay \r\n     */\r\n    handleClearState() {\r\n        if(this.state.overlay !== \"none\") this.closeOverlay();\r\n        else this.setState({\r\n            trackPosn: -1,\r\n            selectedTimeline: null,\r\n            selectedEvent: null,\r\n            zoom: 1,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles key presses\r\n     * @param {event} e - the keyboard event; used for identifying the intended action\r\n     */\r\n    handleKeyPress(e) {\r\n        if(e.key === \"Escape\") {\r\n            if(this.state.fullscreen) this.toggleFullscreen();\r\n            else this.handleClearState();\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                                                                        //\r\n    //                                      Menu Methods                                      //\r\n    //                                                                                        //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    /**\r\n     * Sets the overlay that should be displayed on top of the Timelines view\r\n     * @param {string} overlay - the label of the overlay that should be displayed\r\n     */\r\n    setOverlay(overlay) {\r\n        this.setState({\r\n            overlay: overlay,\r\n        });\r\n    }\r\n    /**\r\n     * Closes the overlay displayed on top of the Timelines view\r\n     * @helper {@link Timeline#setOverlay}\r\n     */\r\n    closeOverlay = () => this.setOverlay(\"none\");\r\n    /**\r\n     * Opens the menu overlay\r\n     * @helper {@link Timeline#setOverlay}\r\n     */\r\n    toggleMenu = () => this.setOverlay(this.state.overlay===\"none\"?\"menu\":\"none\");\r\n    /**\r\n     * Opens the navigation overlay\r\n     * @helper {@link Timeline#setOverlay}\r\n     */\r\n    openNavigation = () => this.setOverlay(\"main\");\r\n\r\n    toggleFullscreen = () => this.setState({\r\n        fullscreen: !this.state.fullscreen,\r\n    });\r\n    \r\n    /**\r\n     * Saves the list of Timelines and Events to a .JSON file\r\n     */\r\n    handleSaveToFile() {\r\n        let element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(this.state.source)));\r\n        element.setAttribute('download', \"timeline.json\");       \r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    /**\r\n     * Copies the list of Timelines and Events to the clipboard as a JSON object\r\n     */\r\n    handleCopyAsJSON() {\r\n        let element = document.createElement('input');\r\n        element.setAttribute(\"type\", \"text\");\r\n        element.value = JSON.stringify(this.state.source);\r\n        document.body.appendChild(element);\r\n        element.select();\r\n        element.setSelectionRange(0, 99999); /* For mobile devices */\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n    //                                                                                        //\r\n    //                                     Render Methods                                     //\r\n    //                                                                                        //\r\n    ////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * Renders the component\r\n     * @helper {@link Timeline#renderLoad}\r\n     * @helper {@link Timeline#fullRender}\r\n     */\r\n    render() {\r\n        if(this.state.hasMounted) return this.fullRender();\r\n        return this.renderLoad();\r\n    }\r\n\r\n    /**\r\n     * Renders the unmounted component with a loading animation\r\n     */\r\n    renderLoad() {\r\n        return (\r\n            <div className=\"timeline-container\">\r\n                <div className=\"load-spinner\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Renders the mounted component\r\n     */\r\n    fullRender() {\r\n              // Get all necessary values from the state\r\n        const { source, selectedTimeline, selectedEvent, overlay, disabledArray, mouseDown, zoom, scrollPosn, trackPosn } = this.state,\r\n              styleProps = {\r\n                  minWidth: this.state.minWidth,\r\n                  width: this.state.width,\r\n                  maxWidth: this.state.maxWidth,\r\n                  minHeight: this.state.minHeight,\r\n                  height: this.state.height,\r\n                  maxHeight: this.state.maxHeight,\r\n                  aspectRatio: this.state.aspectRatio,\r\n              },\r\n\r\n              // Get all necessary values from complex getters\r\n              earliestDate = this.boundsAndLength.earliestDate + this.state.scrollPosn,\r\n              totalLength = this.boundsAndLength.totalLength,\r\n              selectedObject = this.selectedObject,\r\n              trackCoord = this.posnToCoord(this.state.trackPosn),\r\n              allUniqueDates = this.allUniqueDates,\r\n              isTracked = this.isTracked,\r\n              \r\n              // Get all necessary timeline control methods\r\n              handleSelect = this.handleSelect,\r\n              handleSelectTimeline = this.handleSelectTimeline,\r\n              handleScroll = this.handleScroll,\r\n              handleDragToZoom = this.handleDragToZoom,\r\n              handleToggleLine = this.handleToggleLine,\r\n              handleTrack = this.handleTrack,\r\n              handleClearState = this.handleClearState,\r\n              handleKeyPress = this.handleKeyPress,\r\n              \r\n              // Get all necessary menu methods\r\n              toggleFullscreen = this.toggleFullscreen,\r\n              closeOverlay = this.closeOverlay,\r\n              toggleMenu = this.toggleMenu,\r\n              openNavigation = this.openNavigation,\r\n              handleSaveToFile = this.handleSaveToFile,\r\n              handleCopyAsJSON = this.handleCopyAsJSON,\r\n\r\n              // Get all necessary DOM-based values\r\n              linesLeft = $(\"ul.timeline > .timeline-item > .line-container\").position()?.left ?? 0;\r\n        \r\n        return (\r\n            <div className=\"timeline-container\" theme={\"light\"} style={styleProps} tabIndex=\"0\"\r\n                 fullscreen={this.state.fullscreen===true?\"fullscreen\":undefined}\r\n                 onMouseDown={(e) => this.setState({ mouseDown: e.target, })}\r\n                 onMouseUp={(e) => {this.setState({ mouseDown: null, })}}\r\n                 onKeyDown={handleKeyPress} >\r\n                <header className=\"timeline-container-header\">\r\n                    <button className=\"menu-button\" onClick={toggleMenu}>\r\n                        <FontAwesomeIcon icon={this.state.overlay===\"none\"?faBars:faArrowLeft} />\r\n                        <span>{this.state.overlay===\"none\"?\"Menu\":\"Back\"}</span>\r\n                    </button>\r\n                    <div className=\"project-title\">Project Timelines</div>\r\n                    <button className=\"expand-collapse-button\" onClick={toggleFullscreen}>\r\n                        <FontAwesomeIcon icon={this.state.fullscreen===true?faCompress:faExpand} />\r\n                        <span>{this.state.fullscreen===true?\"Collapse\":\"Expand\"}</span>\r\n                    </button>\r\n                </header>\r\n                <div className=\"timeline-container-body\" onMouseMove={handleTrack}>\r\n                    <div className=\"overlay-layer\" expanded={overlay!==\"none\" ? \"expanded\" : undefined}>\r\n                        {\r\n                            overlay !== \"none\" &&\r\n                                <ul className=\"menu-overlay\">\r\n                                    {/* <li className=\"search-button\" tabIndex={overlay===\"none\"?\"-1\":\"0\"} >\r\n                                        <FontAwesomeIcon icon={faSearch} />\r\n                                        <span>Search</span>\r\n                                    </li> */}\r\n                                    <li className=\"open-navigation\" onClick={openNavigation} tabIndex={overlay===\"none\"?\"-1\":\"0\"} >\r\n                                        <FontAwesomeIcon icon={faFolderOpen} />\r\n                                        <span>Navigation view</span>\r\n                                    </li>\r\n                                    <li className=\"save-button\" onClick={handleSaveToFile} tabIndex={overlay===\"none\"?\"-1\":\"0\"} >\r\n                                        <FontAwesomeIcon icon={faFileDownload} />\r\n                                        <span>Download as file</span>\r\n                                    </li>\r\n                                    <li className=\"copy-button\" onClick={handleCopyAsJSON} tabIndex={overlay===\"none\"?\"-1\":\"0\"} >\r\n                                        <FontAwesomeIcon icon={faClipboard} />\r\n                                        <span>Copy as JSON</span>\r\n                                    </li>\r\n                                    {/* <li className=\"about-button\" tabIndex={overlay===\"none\"?\"-1\":\"0\"} >\r\n                                        <FontAwesomeIcon icon={faInfo} />\r\n                                        <span>About</span>\r\n                                    </li> */}\r\n                                </ul>\r\n                        }\r\n                        {\r\n                            overlay === \"main\" &&\r\n                                <MainOverlay\r\n                                    source={this.state.source}\r\n                                    selectedObject={selectedObject}\r\n                                    handleSelect={handleSelect} />\r\n                        }\r\n                    </div>\r\n                    <ul className=\"timeline\" dragging={mouseDown!==null ? \"dragging\" : undefined} onWheel={handleScroll} >\r\n                        <li className=\"timeline-item ruler-container\">\r\n                            <div></div>\r\n                            <div className=\"ruler\">\r\n                                <div className=\"ruler-wrapper\">\r\n                                    {\r\n                                        allUniqueDates.map((posn, i) =>\r\n                                            posn >= scrollPosn &&\r\n                                                <div className=\"rule\" posn={posn} key={i}\r\n                                                    style={{ \"left\": 100*(posn - earliestDate)/(totalLength/zoom) + \"%\" }} />\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                        {\r\n                            source.map((line, i) =>\r\n                                <li className=\"timeline-item\" label={line.label} key={i}\r\n                                    disabled={disabledArray[i] ? \"disabled\" : undefined}\r\n                                    tracked={isTracked(line) ? \"tracked\" : undefined}>\r\n                                    <div className=\"line-label\" title={line.label}\r\n                                        style={{ \"color\": line.color }}>\r\n                                        <button className=\"line-toggle\" tabIndex={overlay===\"none\"?\"0\":\"-1\"} onClick={handleToggleLine}>\r\n                                            <FontAwesomeIcon icon={disabledArray[i] ? faEyeSlash : faEye} />\r\n                                        </button>\r\n                                        <button className=\"line-name\" tabIndex={overlay===\"none\"?\"0\":\"-1\"} onClick={handleSelectTimeline}>\r\n                                            <span>{line.label}</span>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"line-container\">\r\n                                        <div className=\"line-wrapper\">\r\n                                            <svg>\r\n                                                {\r\n                                                    (line.start >= scrollPosn || line.end >= scrollPosn) &&\r\n                                                    <line className=\"line-main\" stroke={line.color} y1=\"50%\" y2=\"50%\"\r\n                                                            x1={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + \"%\"}\r\n                                                            x2={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + Math.max(0, 100*(line.end - Math.max(line.start, scrollPosn))/(totalLength/zoom)) + \"%\"}\r\n                                                        />\r\n                                                    }\r\n                                                {\r\n                                                    line.start >= scrollPosn &&\r\n                                                        <line className=\"line-end\" stroke={line.color} y1=\"35%\" y2=\"65%\"\r\n                                                            x1={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + \"%\"}\r\n                                                            x2={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + \"%\"}\r\n                                                        />\r\n                                                }\r\n                                                {\r\n                                                    line.end >= scrollPosn &&\r\n                                                        <line className=\"line-end\" stroke={line.color} y1=\"35%\" y2=\"65%\"\r\n                                                            x1={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + Math.max(0, 100*(line.end - Math.max(line.start, scrollPosn))/(totalLength/zoom)) + \"%\"}\r\n                                                            x2={Math.max(0, 100*(line.start - earliestDate)/(totalLength/zoom)) + Math.max(0, 100*(line.end - Math.max(line.start, scrollPosn))/(totalLength/zoom)) + \"%\"}\r\n                                                        />\r\n                                                }\r\n                                                {\r\n                                                    line.events.map((event, j) =>\r\n                                                        event.posn >= scrollPosn &&\r\n                                                            <g key={j}>\r\n                                                                <circle className=\"line-event\" posn={event.posn} label={event.label} tabIndex={!disabledArray[i] && isTracked(line) && overlay===\"none\" ? \"0\" : undefined}\r\n                                                                    stroke={line.color} cy=\"50%\" cx={100*(event.posn - earliestDate)/(totalLength/zoom) + \"%\"}\r\n                                                                    onMouseOver={(e) => !(line.label===selectedTimeline && event.label===selectedEvent) && e.target.setAttribute('r', '0.75em') }\r\n                                                                    onMouseOut={(e) => !(line.label===selectedTimeline && event.label===selectedEvent) && e.target.setAttribute('r', '0.5em') }\r\n                                                                    onClick={this.handleSelectEvent} >\r\n                                                                </circle>\r\n                                                                <line y1=\"50%\" y2=\"0%\"\r\n                                                                    x1={100*(event.posn - earliestDate)/(totalLength/zoom) + \"%\"}\r\n                                                                    x2={100*(event.posn - earliestDate)/(totalLength/zoom) + \"%\"} />\r\n                                                                <rect fill=\"white\" height=\"1.5em\" y=\"-0.75em\" rx=\"0.25em\" ry=\"0.25em\"\r\n                                                                    width={`[${event.posn}] ${event.label}`.length + \"ch\"}\r\n                                                                    x={\"calc(\" + 100*(event.posn - earliestDate)/(totalLength/zoom) + \"% - \" + (`[${event.posn}] ${event.label}`.length/2) + \"ch)\"}\r\n                                                                />\r\n                                                                <text x={100*(event.posn - earliestDate)/(totalLength/zoom) + \"%\"}\r\n                                                                    dominantBaseline=\"middle\" textAnchor=\"middle\">\r\n                                                                    {`[${event.posn}] ${event.label}`}\r\n                                                                </text>\r\n                                                            </g>\r\n                                                    )\r\n                                                }\r\n                                            </svg>\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                    {\r\n                        trackPosn >= scrollPosn &&\r\n                            <div className=\"timeline-tracker\" posn={trackPosn}\r\n                                style={{ \"left\": trackCoord + \"px\" }} />\r\n                    }\r\n                    <div className=\"timeline-bottom\">\r\n                        <div className=\"timeline-scrollbar\">\r\n                            <div className=\"scrollbar-thumb\"\r\n                                style={{ \"left\": 100*scrollPosn/(totalLength) + \"%\",\r\n                                            \"width\": \"calc(\" + 100/zoom + \"% - \" + linesLeft + \"px)\",\r\n                                            \"marginLeft\": linesLeft,\r\n                                            \"opacity\": zoom===1?\"0\":\"1\" }} />\r\n                        </div>\r\n                        <div className=\"timeline-controls\">\r\n                            <div></div>\r\n                            {/* <button className=\"about-button\">\r\n                                <FontAwesomeIcon icon={faInfo} />\r\n                                <span>About</span>\r\n                            </button> */}\r\n                            <div className=\"zoom-info\" title=\"Click and drag or use Alt+Scroll to zoom timelines\">\r\n                                <span zoom={Math.round(zoom*100)}\r\n                                    onMouseMove={(e) => this.state.mouseDown && handleDragToZoom(e)}>\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                    <span>{Math.floor(zoom*100) + \"%\"}</span>\r\n                                </span>\r\n                            </div>\r\n                            {\r\n                                trackPosn >= 0 && (\r\n                                    <button className=\"clear-button\" onClick={handleClearState}>\r\n                                        <FontAwesomeIcon icon={faTimes} />\r\n                                        <span>Clear selected</span>\r\n                                    </button>\r\n                                )\r\n                            }\r\n                            { trackPosn === -1 && <div /> }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timeline;","\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\nimport './style/style.css';\r\n\r\nimport source from './data/test-lines.json'\r\nimport Timeline from './components/Timeline';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            source: source,\r\n        };\r\n        this.handleLoadFile = this.handleLoadFile.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleLoadFile(json) {\r\n        this.setState({\r\n            lines: JSON.parse(json),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const lines = this.state.lines;\r\n\r\n        if(lines !== null)\r\n            return (\r\n                <div className=\"App\">\r\n                    <Timeline source={source} />\r\n                </div>\r\n            );\r\n        else return(\r\n            <div className=\"App\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}